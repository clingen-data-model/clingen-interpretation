provnparser = (function() {
  "use strict";

  /*
   * Generated by PEG.js 0.8.0.
   *
   * http://pegjs.org/
   */

  function peg$subclass(child, parent) {
    function ctor() { this.constructor = child; }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
  }

  function peg$SyntaxError(message, expected, found, location) {
    this.message  = message;
    this.expected = expected;
    this.found    = found;
    this.location = location;

    this.name     = "SyntaxError";
  }

  peg$subclass(peg$SyntaxError, Error);

  function peg$parse(input) {
    var options = arguments.length > 1 ? arguments[1] : {},
        parser  = this,

        peg$FAILED = {},

        peg$startRuleIndices = { document: 0 },
        peg$startRuleIndex   = 0,

        peg$consts = [
          "document",
          { type: "literal", value: "document", description: "\"document\"" },
          "endDocument",
          { type: "literal", value: "endDocument", description: "\"endDocument\"" },
          function(type, namespaces, expressions, bundles) {
                  return {
                      nodes: nodes, links: links
                  };
              },
          "bundle",
          { type: "literal", value: "bundle", description: "\"bundle\"" },
          "endBundle",
          { type: "literal", value: "endBundle", description: "\"endBundle\"" },
          function(i, n, e) { return { type: 'bundle', identifier: i, namespaces: n, expressions: e }; },
          function(expression) { return expression; },
          "activity",
          { type: "literal", value: "activity", description: "\"activity\"" },
          "agent",
          { type: "literal", value: "agent", description: "\"agent\"" },
          "entity",
          { type: "literal", value: "entity", description: "\"entity\"" },
          "(",
          { type: "literal", value: "(", description: "\"(\"" },
          ")",
          { type: "literal", value: ")", description: "\")\"" },
          function(expressionType, identifier, attributeValuePairs) {
                  return make_node(expressionType, identifier, attributeValuePairs);
              },
          "wasGeneratedBy",
          { type: "literal", value: "wasGeneratedBy", description: "\"wasGeneratedBy\"" },
          "used",
          { type: "literal", value: "used", description: "\"used\"" },
          "wasInvalidatedBy",
          { type: "literal", value: "wasInvalidatedBy", description: "\"wasInvalidatedBy\"" },
          function(expressionType, optionalIdentifier, subject, o, t) { return {object: o, time: t}; },
          function(expressionType, optionalIdentifier, subject, objectTime, attributeValuePairs) {
                  if (objectTime) return make_link(expressionType, subject, objectTime.object);
                  // FIXME -- not sure what to do if objectTime is absent
              },
          "wasInformedBy",
          { type: "literal", value: "wasInformedBy", description: "\"wasInformedBy\"" },
          "wasAttributedTo",
          { type: "literal", value: "wasAttributedTo", description: "\"wasAttributedTo\"" },
          "wasInfluencedBy",
          { type: "literal", value: "wasInfluencedBy", description: "\"wasInfluencedBy\"" },
          function(expressionType, optionalIdentifier, subject, object, attributeValuePairs) {
                  return make_link(expressionType, subject, object);
              },
          "alternateOf",
          { type: "literal", value: "alternateOf", description: "\"alternateOf\"" },
          "specializationOf",
          { type: "literal", value: "specializationOf", description: "\"specializationOf\"" },
          "hadMember",
          { type: "literal", value: "hadMember", description: "\"hadMember\"" },
          function(expressionType, subject, object) {
                  return make_link(expressionType, subject, object);
              },
          "wasStartedBy",
          { type: "literal", value: "wasStartedBy", description: "\"wasStartedBy\"" },
          function(expressionType, optionalIdentifier, activity, trigger, starter, time) { return { trigger: trigger, starter: starter, time: time }; },
          function(expressionType, optionalIdentifier, activity, optionals, attributeValuePairs) {
                  return make_multi_link(activity, expressionType, { trigger: optionals.trigger, starter: optionals.starter }, attributeValuePairs);
              },
          "wasEndedBy",
          { type: "literal", value: "wasEndedBy", description: "\"wasEndedBy\"" },
          function(expressionType, optionalIdentifier, activity, trigger, ender, time) { return { trigger: trigger, ender: ender, time: time }; },
          function(expressionType, optionalIdentifier, activity, optionals, attributeValuePairs) {
                  return make_multi_link(activity, expressionType, { trigger: optionals.trigger, ender: optionals.ender }, attributeValuePairs);
              },
          "wasAssociatedWith",
          { type: "literal", value: "wasAssociatedWith", description: "\"wasAssociatedWith\"" },
          function(expressionType, optionalIdentifier, activity, agent, plan) { return { agent: agent, plan: plan }; },
          function(expressionType, optionalIdentifier, activity, optionals, attributeValuePairs) {
                  if (optionals.plan && optionals.plan != '-') {
                      return make_multi_link(activity, expressionType, { agent: optionals.agent, plan: optionals.plan }, attributeValuePairs);
                  } else {
                      return make_link(expressionType, activity, optionals.agent);
                  }
              },
          "actedOnBehalfOf",
          { type: "literal", value: "actedOnBehalfOf", description: "\"actedOnBehalfOf\"" },
          function(expressionType, optionalIdentifier, agent, actedOnBehalfOf, _) { return _; },
          function(expressionType, optionalIdentifier, agent, actedOnBehalfOf, inContextOfActivity, attributeValuePairs) {
                  if (inContextOfActivity) {
                      return make_multi_link(agent, expressionType, { responsibleParty: actedOnBehalfOf, inContextOfActivity: inContextOfActivity }, attributeValuePairs);
                  } else {
                      make_link(expressionType, entity, actedOnBehalfOf);
                  }
              },
          "wasDerivedFrom",
          { type: "literal", value: "wasDerivedFrom", description: "\"wasDerivedFrom\"" },
          function(expressionType, optionalIdentifier, entity, wasDerivedFrom, activity, generation, usage) { return { activity: activity, generation: generation, usage: usage }; },
          function(expressionType, optionalIdentifier, entity, wasDerivedFrom, optionals, attributeValuePairs) {
                  if (optionals) {
                      return make_multi_link(entity, expressionType, {activity: optionals.activity, generation: optionals.generation, usage: optionals.usage}, attributeValuePairs);
                  } else {
                      return make_link(expressionType, entity, wasDerivedFrom);
                  }
              },
          "{",
          { type: "literal", value: "{", description: "\"{\"" },
          "}",
          { type: "literal", value: "}", description: "\"}\"" },
          "[",
          { type: "literal", value: "[", description: "\"[\"" },
          "]",
          { type: "literal", value: "]", description: "\"]\"" },
          function(_) { return _; },
          "=",
          { type: "literal", value: "=", description: "\"=\"" },
          function(a, v) { return { attribute: a, value: v }; },
          "-",
          { type: "literal", value: "-", description: "\"-\"" },
          ";",
          { type: "literal", value: ";", description: "\";\"" },
          "%%",
          { type: "literal", value: "%%", description: "\"%%\"" },
          function(literal, datatype) { return { literal: literal, datatype: datatype }; },
          function(d, n) { return { defaultNamespace: d, namespaces: n }; },
          "prefix",
          { type: "literal", value: "prefix", description: "\"prefix\"" },
          function(p, n) { return { prefix: p, namespace: n }; },
          "default",
          { type: "literal", value: "default", description: "\"default\"" },
          ":",
          { type: "literal", value: ":", description: "\":\"" },
          /^[0-9]/,
          { type: "class", value: "[0-9]", description: "[0-9]" },
          ".",
          { type: "literal", value: ".", description: "\".\"" },
          /^[\/@~&+*?#$!]/,
          { type: "class", value: "[/@~&+*?#$!]", description: "[/@~&+*?#$!]" },
          "\\",
          { type: "literal", value: "\\", description: "\"\\\\\"" },
          /^[='(),\-:;[\].]/,
          { type: "class", value: "[=\\'(),\\-:;\\[\\]\\.]", description: "[=\\'(),\\-:;\\[\\]\\.]" },
          "%",
          { type: "literal", value: "%", description: "\"%\"" },
          /^[0-9A-Fa-f]/,
          { type: "class", value: "[0-9A-Fa-f]", description: "[0-9A-Fa-f]" },
          "'",
          { type: "literal", value: "'", description: "\"'\"" },
          function(qname) { return qname; },
          "T",
          { type: "literal", value: "T", description: "\"T\"" },
          "Z",
          { type: "literal", value: "Z", description: "\"Z\"" },
          "+",
          { type: "literal", value: "+", description: "\"+\"" },
          /^[A-Z]/,
          { type: "class", value: "[A-Z]", description: "[A-Z]" },
          /^[a-z]/,
          { type: "class", value: "[a-z]", description: "[a-z]" },
          /^[\xC0-\xD6]/,
          { type: "class", value: "[\\u00C0-\\u00D6]", description: "[\\u00C0-\\u00D6]" },
          /^[\xD8-\xF6]/,
          { type: "class", value: "[\\u00D8-\\u00F6]", description: "[\\u00D8-\\u00F6]" },
          /^[\xF8-\u02FF]/,
          { type: "class", value: "[\\u00F8-\\u02FF]", description: "[\\u00F8-\\u02FF]" },
          /^[\u0370-\u037D]/,
          { type: "class", value: "[\\u0370-\\u037D]", description: "[\\u0370-\\u037D]" },
          /^[\u037F-\u1FFF]/,
          { type: "class", value: "[\\u037F-\\u1FFF]", description: "[\\u037F-\\u1FFF]" },
          /^[\u200C-\u200D]/,
          { type: "class", value: "[\\u200C-\\u200D]", description: "[\\u200C-\\u200D]" },
          /^[\u2070-\u218F]/,
          { type: "class", value: "[\\u2070-\\u218F]", description: "[\\u2070-\\u218F]" },
          /^[\u2C00-\u2FEF]/,
          { type: "class", value: "[\\u2C00-\\u2FEF]", description: "[\\u2C00-\\u2FEF]" },
          /^[\u3001-\uD7FF]/,
          { type: "class", value: "[\\u3001-\\uD7FF]", description: "[\\u3001-\\uD7FF]" },
          /^[\uF900-\uFDCF]/,
          { type: "class", value: "[\\uF900-\\uFDCF]", description: "[\\uF900-\\uFDCF]" },
          /^[\uFDF0-\uFFFD]/,
          { type: "class", value: "[\\uFDF0-\\uFFFD]", description: "[\\uFDF0-\\uFFFD]" },
          "_",
          { type: "literal", value: "_", description: "\"_\"" },
          /^[\xB7\u0300-\u036F\u203F-\u2040]/,
          { type: "class", value: "[\\u00B7\\u0300-\\u036f\\u203f-\\u2040]", description: "[\\u00B7\\u0300-\\u036f\\u203f-\\u2040]" },
          /^[\u0300-\u036F]/,
          { type: "class", value: "[\\u0300-\\u036F]", description: "[\\u0300-\\u036F]" },
          /^[\u203F-\u2040]/,
          { type: "class", value: "[\\u203F-\\u2040]", description: "[\\u203F-\\u2040]" },
          /^[^"\\\n\r]/,
          { type: "class", value: "[^\\u0022\\u005C\\u000A\\u000D]", description: "[^\\u0022\\u005C\\u000A\\u000D]" },
          function(literal) { return literal; },
          "\"\"\"",
          { type: "literal", value: "\"\"\"", description: "\"\\\"\\\"\\\"\"" },
          "\"",
          { type: "literal", value: "\"", description: "\"\\\"\"" },
          "\"\"",
          { type: "literal", value: "\"\"", description: "\"\\\"\\\"\"" },
          /^[^"\\]/,
          { type: "class", value: "[^\"\\\\]", description: "[^\"\\\\]" },
          /^[tbnrf'"]/,
          { type: "class", value: "[tbnrf\\'\\\"]", description: "[tbnrf\\'\\\"]" },
          "@",
          { type: "literal", value: "@", description: "\"@\"" },
          /^[a-zA-Z]/,
          { type: "class", value: "[a-zA-Z]", description: "[a-zA-Z]" },
          /^[a-zA-Z0-9]/,
          { type: "class", value: "[a-zA-Z0-9]", description: "[a-zA-Z0-9]" },
          "<",
          { type: "literal", value: "<", description: "\"<\"" },
          /^[^<>"{}|\^`\0- ]/,
          { type: "class", value: "[^<>\"{}|^`\\u0000-\\u0020]", description: "[^<>\"{}|^`\\u0000-\\u0020]" },
          ">",
          { type: "literal", value: ">", description: "\">\"" },
          function() { return text(); },
          "//",
          { type: "literal", value: "//", description: "\"//\"" },
          /^[^\r\n]/,
          { type: "class", value: "[^\\r\\n]", description: "[^\\r\\n]" },
          /^[\r\n]/,
          { type: "class", value: "[\\r\\n]", description: "[\\r\\n]" },
          "/*",
          { type: "literal", value: "/*", description: "\"/*\"" },
          "*/",
          { type: "literal", value: "*/", description: "\"*/\"" },
          { type: "any", description: "any character" },
          ",",
          { type: "literal", value: ",", description: "\",\"" },
          /^[ \r\t\n]/,
          { type: "class", value: "[ \\r\\t\\n]", description: "[ \\r\\t\\n]" },
          function() { return undefined; }
        ],

        peg$bytecode = [
          peg$decode("!7X+\xA4#. \"\"2 3!+\x95$7X+\x8C$7:*\" \";+~$7X+u$=7\",#&7\"\"+e$7X+\\$=7!,#&7!\"+L$7X+C$.\"\"\"2\"3#+4$7X++$4+6$+$)'%#%$+#<$*#<$)#<$(#<$'#<$&#<$%#<$$#<$##<$\"#<\"#<"),
          peg$decode("!.%\"\"2%3&+\x8D#7X+\x84$75+{$7X+r$7:*\" \";+d$7X+[$=7\",#&7\"\"+K$7X+B$.'\"\"2'3(+3$7X+*$4*6)*#'%#%$*#<$)#<$(#<$'#<$&#<$%#<$$#<$##<$\"#<\"#<"),
          peg$decode("!7#*S \"7$*M \"7%*G \"7'*A \"7(*; \"7)*5 \"7**/ \"7+*) \"7&*# \"7,+1#7X+($4\"6*\"!!%$\"#<\"#<"),
          peg$decode("!.+\"\"2+3,*5 \".-\"\"2-3.*) \"./\"\"2/30+\x92#.1\"\"2132+\x83$75+z$!7W+>#72+5$7W+,$72+#$'$%$$#<$##<$\"#<\"#<*\" \";+G$7/*\" \";+9$.3\"\"2334+*$4&65&#%#!%$&#<$%#<$$#<$##<$\"#<\"#<"),
          peg$decode("!.6\"\"2637*5 \".8\"\"2839*) \".:\"\"2:3;+\xAB#.1\"\"2132+\x9C$73*\" \";+\x8E$75+\x85$!7W+G#74+>$7W+5$72+,$4$6<$%(&%\" %$$#<$##<$\"#<\"#<*\" \";+I$7/*\" \";+;$.3\"\"2334+,$4'6='%&$#\"!%$'#<$&#<$%#<$$#<$##<$\"#<\"#<"),
          peg$decode("!.>\"\"2>3?*5 \".@\"\"2@3A*) \".B\"\"2B3C+\x81#.1\"\"2132+r$73*\" \";+d$75+[$7W+R$74+I$7/*\" \";+;$.3\"\"2334+,$4(6D(%'%$\"!%$(#<$'#<$&#<$%#<$$#<$##<$\"#<\"#<"),
          peg$decode("!.E\"\"2E3F*5 \".G\"\"2G3H*) \".I\"\"2I3J+c#.1\"\"2132+T$75+K$7W+B$75+9$.3\"\"2334+*$4&6K&#%#!%$&#<$%#<$$#<$##<$\"#<\"#<"),
          peg$decode("!.L\"\"2L3M+\xBE#.1\"\"2132+\xAF$73*\" \";+\xA1$75+\x98$!7W+Z#74+Q$7W+H$74+?$7W+6$72+-$4&6N&&*('$\" %$&#<$%#<$$#<$##<$\"#<\"#<*\" \";+I$7/*\" \";+;$.3\"\"2334+,$4'6O'%&$#\"!%$'#<$&#<$%#<$$#<$##<$\"#<\"#<"),
          peg$decode("!.P\"\"2P3Q+\xBE#.1\"\"2132+\xAF$73*\" \";+\xA1$75+\x98$!7W+Z#74+Q$7W+H$74+?$7W+6$72+-$4&6R&&*('$\" %$&#<$%#<$$#<$##<$\"#<\"#<*\" \";+I$7/*\" \";+;$.3\"\"2334+,$4'6S'%&$#\"!%$'#<$&#<$%#<$$#<$##<$\"#<\"#<"),
          peg$decode("!.T\"\"2T3U+\xAB#.1\"\"2132+\x9C$73*\" \";+\x8E$75+\x85$!7W+G#74+>$7W+5$74+,$4$6V$%(&%\" %$$#<$##<$\"#<\"#<*\" \";+I$7/*\" \";+;$.3\"\"2334+,$4'6W'%&$#\"!%$'#<$&#<$%#<$$#<$##<$\"#<\"#<"),
          peg$decode("!.X\"\"2X3Y+\xAC#.1\"\"2132+\x9D$73*\" \";+\x8F$75+\x86$7W+}$75+t$!7W+5#74+,$4\"6Z\"%(&%# %$\"#<\"#<*\" \";+J$7/*\" \";+<$.3\"\"2334+-$4)6[)&(&%#\"!%$)#<$(#<$'#<$&#<$%#<$$#<$##<$\"#<\"#<"),
          peg$decode("!.\\\"\"2\\3]+\xD2#.1\"\"2132+\xC3$73*\" \";+\xB5$75+\xAC$7W+\xA3$75+\x9A$!7W+[#74+R$7W+I$74+@$7W+7$74+.$4&6^&',*)'$\" %$&#<$%#<$$#<$##<$\"#<\"#<*\" \";+J$7/*\" \";+<$.3\"\"2334+-$4)6_)&(&%#\"!%$)#<$(#<$'#<$&#<$%#<$$#<$##<$\"#<\"#<"),
          peg$decode("!7=+\xF5#.1\"\"2132+\xE6$73*\" \";+\xD8$=!7-+]#!7W+8#!87-9+##\"#:\"\"<+#$'\"%$\"#<\"#<*/ \"!87/9+##\"#:\"\"<+#$'\"%$\"#<\"#<,g&!7-+]#!7W+8#!87-9+##\"#:\"\"<+#$'\"%$\"#<\"#<*/ \"!87/9+##\"#:\"\"<+#$'\"%$\"#<\"#<\"+@$7/*\" \";+2$.3\"\"2334+#$'&%$&#<$%#<$$#<$##<$\"#<\"#<"),
          peg$decode("74*5 \"77*/ \"7H*) \"7,*# \"7."),
          peg$decode("!.`\"\"2`3a+\xDC#=!7-+c#!7W+8#!87-9+##\"#:\"\"<+#$'\"%$\"#<\"#<*5 \"!8.b\"\"2b3c9+##\"#:\"\"<+#$'\"%$\"#<\"#<+p#,m&!7-+c#!7W+8#!87-9+##\"#:\"\"<+#$'\"%$\"#<\"#<*5 \"!8.b\"\"2b3c9+##\"#:\"\"<+#$'\"%$\"#<\"#<\"\"\"<+2$.b\"\"2b3c+#$'#%$##<$\"#<\"#<*\xEC \"!.1\"\"2132+\xDC#=!7-+c#!7W+8#!87-9+##\"#:\"\"<+#$'\"%$\"#<\"#<*5 \"!8.3\"\"23349+##\"#:\"\"<+#$'\"%$\"#<\"#<+p#,m&!7-+c#!7W+8#!87-9+##\"#:\"\"<+#$'\"%$\"#<\"#<*5 \"!8.3\"\"23349+##\"#:\"\"<+#$'\"%$\"#<\"#<\"\"\"<+2$.3\"\"2334+#$'#%$##<$\"#<\"#<"),
          peg$decode("!7W+j#.d\"\"2d3e+[$7X+R$70+I$7X+@$.f\"\"2f3g+1$7X+($4'6h'!#%$'#<$&#<$%#<$$#<$##<$\"#<\"#<"),
          peg$decode("=!71+\x84#7X+{$!7W+8#!8719+##\"#:\"\"<+#$'\"%$\"#<\"#<*H \"!8!7X+2#.f\"\"2f3g+#$'\"%$\"#<\"#<9+##\"#:\"\"<+($4#6h#!\"%$##<$\"#<\"#<+\x91#,\x8E&!71+\x84#7X+{$!7W+8#!8719+##\"#:\"\"<+#$'\"%$\"#<\"#<*H \"!8!7X+2#.f\"\"2f3g+#$'\"%$\"#<\"#<9+##\"#:\"\"<+($4#6h#!\"%$##<$\"#<\"#<\"\"\"<"),
          peg$decode("!76+S#7X+J$.i\"\"2i3j+;$7X+2$77+)$4%6k%\"$ %$%#<$$#<$##<$\"#<\"#<"),
          peg$decode("7H*) \".l\"\"2l3m"),
          peg$decode("!7X+R#74+I$7X+@$.n\"\"2n3o+1$7X+($4%6h%!#%$%#<$$#<$##<$\"#<\"#<"),
          peg$decode("!7X+=#75*) \".l\"\"2l3m+($4\"6h\"! %$\"#<\"#<"),
          peg$decode("!7=+\"!\"(%"),
          peg$decode("!7=+\"!\"(%"),
          peg$decode("78*# \"79"),
          peg$decode("!7D+A#.p\"\"2p3q+2$7=+)$4#6r#\"\" %$##<$\"#<\"#<"),
          peg$decode("!!7D+,#7R+#$'\"%$\"#<\"#<+\"!\"(%*/ \"7D*) \"7E*# \"7F"),
          peg$decode("!7<*/ \"!87<9*##\"\":\"#<+9#=7;,#&7;\"+)$4\"6s\"\"! %$\"#<\"#<"),
          peg$decode("!.t\"\"2t3u+M#7X+D$7L+;$7X+2$7S+)$4%6v%\"\" %$%#<$$#<$##<$\"#<\"#<"),
          peg$decode("!.w\"\"2w3x+5#7X+,$7S+#$'#%$##<$\"#<\"#<"),
          peg$decode("!!7L+7#.y\"\"2y3z+($4\"6h\"!!%$\"#<\"#<*\" \";+,#7?+#$'\"%$\"#<\"#<*Q \"!7L+G#.y\"\"2y3z+8$!87?9*##\"\":\"#<+#$'#%$##<$\"#<\"#<"),
          peg$decode("7N*# \"7@"),
          peg$decode("!!7K*/ \"0{\"\"1!3|*# \"7@+\xAF#=7>*[ \"!=.}\"\"2}3~+,#,)&.}\"\"2}3~\"\"\"<+8#!87>9+##\"#:\"\"<+#$'\"%$\"#<\"#<,a&7>*[ \"!=.}\"\"2}3~+,#,)&.}\"\"2}3~\"\"\"<+8#!87>9+##\"#:\"\"<+#$'\"%$\"#<\"#<\"+#$'\"%$\"#<\"#<+\"!\"(%"),
          peg$decode("0\"\"1!3\x80*) \"7B*# \"7A"),
          peg$decode("!.\x81\"\"2\x813\x82+2#0\x83\"\"1!3\x84+#$'\"%$\"#<\"#<"),
          peg$decode("!.\x85\"\"2\x853\x86+5#7C+,$7C+#$'#%$##<$\"#<\"#<"),
          peg$decode("0\x87\"\"1!3\x88"),
          peg$decode("7O*# \"7P"),
          peg$decode("!.l\"\"2l3m*\" \";+9#=7G+&#,#&7G\"\"\"<+#$'\"%$\"#<\"#<"),
          peg$decode("!.\x89\"\"2\x893\x8A+G#!7=+\"!\"(%+7$.\x89\"\"2\x893\x8A+($4#6\x8B#!!%$##<$\"#<\"#<"),
          peg$decode("0{\"\"1!3|"),
          peg$decode("!!7G+\u014A#7G+\u0141$7G+\u0138$7G+\u012F$.l\"\"2l3m+\u0120$7G+\u0117$7G+\u010E$.l\"\"2l3m+\xFF$7G+\xF6$7G+\xED$.\x8C\"\"2\x8C3\x8D+\xDE$7G+\xD5$7G+\xCC$.y\"\"2y3z+\xBD$7G+\xB4$7G+\xAB$.y\"\"2y3z+\x9C$7G+\x93$7G+\x8A$!.}\"\"2}3~+R#7G+I$!7G+1#7G*\" \";+#$'\"%$\"#<\"#<*\" \";+#$'#%$##<$\"#<\"#<*\" \";+=$.\x8E\"\"2\x8E3\x8F*# \"7I*\" \";+#$'5%$5#<$4#<$3#<$2#<$1#<$0#<$/#<$.#<$-#<$,#<$+#<$*#<$)#<$(#<$'#<$&#<$%#<$$#<$##<$\"#<\"#<+\"!\"(%"),
          peg$decode("!.\x90\"\"2\x903\x91*) \".l\"\"2l3m+V#7G+M$7G+D$.y\"\"2y3z+5$7G+,$7G+#$'&%$&#<$%#<$$#<$##<$\"#<\"#<"),
          peg$decode("0\x92\"\"1!3\x93*\xAD \"0\x94\"\"1!3\x95*\xA1 \"0\x96\"\"1!3\x97*\x95 \"0\x98\"\"1!3\x99*\x89 \"0\x9A\"\"1!3\x9B*} \"0\x9C\"\"1!3\x9D*q \"0\x9E\"\"1!3\x9F*e \"0\xA0\"\"1!3\xA1*Y \"0\xA2\"\"1!3\xA3*M \"0\xA4\"\"1!3\xA5*A \"0\xA6\"\"1!3\xA7*5 \"0\xA8\"\"1!3\xA9*) \"0\xAA\"\"1!3\xAB"),
          peg$decode("7J*) \".\xAC\"\"2\xAC3\xAD"),
          peg$decode("!!7J+\x8B#=7N*I \"!=.}\"\"2}3~,)&.}\"\"2}3~\"+,#7N+#$'\"%$\"#<\"#<,O&7N*I \"!=.}\"\"2}3~,)&.}\"\"2}3~\"+,#7N+#$'\"%$\"#<\"#<\"+#$'\"%$\"#<\"#<+\"!\"(%"),
          peg$decode("!7K*) \"0{\"\"1!3|+c#=7K*5 \"0{\"\"1!3|*) \"0\xAE\"\"1!3\xAF,;&7K*5 \"0{\"\"1!3|*) \"0\xAE\"\"1!3\xAF\"+#$'\"%$\"#<\"#<"),
          peg$decode("7K*M \".l\"\"2l3m*A \"0{\"\"1!3|*5 \"0\xB0\"\"1!3\xB1*) \"0\xB2\"\"1!3\xB3"),
          peg$decode("!7V+`#!=0\xB4\"\"1!3\xB5*# \"7Q,/&0\xB4\"\"1!3\xB5*# \"7Q\"+\"!\"(%+1$7V+($4#6\xB6#!!%$##<$\"#<\"#<"),
          peg$decode("!.\xB7\"\"2\xB73\xB8+\xBA#!=!.\xB9\"\"2\xB93\xBA*) \".\xBB\"\"2\xBB3\xBC*\" \";+8#0\xBD\"\"1!3\xBE*# \"7Q+#$'\"%$\"#<\"#<,Y&!.\xB9\"\"2\xB93\xBA*) \".\xBB\"\"2\xBB3\xBC*\" \";+8#0\xBD\"\"1!3\xBE*# \"7Q+#$'\"%$\"#<\"#<\"+\"!\"(%+7$.\xB7\"\"2\xB73\xB8+($4#6\xB6#!!%$##<$\"#<\"#<"),
          peg$decode("!.\x81\"\"2\x813\x82+2#0\xBF\"\"1!3\xC0+#$'\"%$\"#<\"#<"),
          peg$decode("!.\xC1\"\"2\xC13\xC2+\xB9#=0\xC3\"\"1!3\xC4+,#,)&0\xC3\"\"1!3\xC4\"\"\"<+\x97$=!.l\"\"2l3m+E#=0\xC5\"\"1!3\xC6+,#,)&0\xC5\"\"1!3\xC6\"\"\"<+#$'\"%$\"#<\"#<,U&!.l\"\"2l3m+E#=0\xC5\"\"1!3\xC6+,#,)&0\xC5\"\"1!3\xC6\"\"\"<+#$'\"%$\"#<\"#<\"+#$'#%$##<$\"#<\"#<"),
          peg$decode("!.\xC7\"\"2\xC73\xC8+\x9A#=0\xC9\"\"1!3\xCA*A \".d\"\"2d3e*5 \".\x81\"\"2\x813\x82*) \".f\"\"2f3g,M&0\xC9\"\"1!3\xCA*A \".d\"\"2d3e*5 \".\x81\"\"2\x813\x82*) \".f\"\"2f3g\"+6$.\xCB\"\"2\xCB3\xCC+'$4#6\xCD# %$##<$\"#<\"#<"),
          peg$decode("!.\xCE\"\"2\xCE3\xCF+N#=0\xD0\"\"1!3\xD1,)&0\xD0\"\"1!3\xD1\"+2$0\xD2\"\"1!3\xD3+#$'#%$##<$\"#<\"#<*\xA6 \"!.\xD4\"\"2\xD43\xD5+\x96#=!!8.\xD6\"\"2\xD63\xD79*##\"\":\"#<+1#-\"\"1!3\xD8+#$'\"%$\"#<\"#<,M&!!8.\xD6\"\"2\xD63\xD79*##\"\":\"#<+1#-\"\"1!3\xD8+#$'\"%$\"#<\"#<\"+2$.\xD6\"\"2\xD63\xD7+#$'#%$##<$\"#<\"#<"),
          peg$decode(".\x89\"\"2\x893\x8A"),
          peg$decode(".\xB9\"\"2\xB93\xBA"),
          peg$decode("!7X+;#.\xD9\"\"2\xD93\xDA+,$7X+#$'#%$##<$\"#<\"#<"),
          peg$decode("!=0\xDB\"\"1!3\xDC*# \"7T,/&0\xDB\"\"1!3\xDC*# \"7T\"+& 4!6\xDD! %")
        ],

        peg$currPos          = 0,
        peg$savedPos         = 0,
        peg$posDetailsCache  = [{ line: 1, column: 1, seenCR: false }],
        peg$maxFailPos       = 0,
        peg$maxFailExpected  = [],
        peg$silentFails      = 0,

        peg$result;

    if ("startRule" in options) {
      if (!(options.startRule in peg$startRuleIndices)) {
        throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
      }

      peg$startRuleIndex = peg$startRuleIndices[options.startRule];
    }

    function text() {
      return input.substring(peg$savedPos, peg$currPos);
    }

    function location() {
      return peg$computeLocation(peg$savedPos, peg$currPos);
    }

    function expected(description) {
      throw peg$buildException(
        null,
        [{ type: "other", description: description }],
        input.substring(peg$savedPos, peg$currPos),
        peg$computeLocation(peg$savedPos, peg$currPos)
      );
    }

    function error(message) {
      throw peg$buildException(
        message,
        null,
        input.substring(peg$savedPos, peg$currPos),
        peg$computeLocation(peg$savedPos, peg$currPos)
      );
    }

    function peg$computePosDetails(pos) {
      var details = peg$posDetailsCache[pos],
          p, ch;

      if (details) {
        return details;
      } else {
        p = pos - 1;
        while (!peg$posDetailsCache[p]) {
          p--;
        }

        details = peg$posDetailsCache[p];
        details = {
          line:   details.line,
          column: details.column,
          seenCR: details.seenCR
        };

        while (p < pos) {
          ch = input.charAt(p);
          if (ch === "\n") {
            if (!details.seenCR) { details.line++; }
            details.column = 1;
            details.seenCR = false;
          } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
            details.line++;
            details.column = 1;
            details.seenCR = true;
          } else {
            details.column++;
            details.seenCR = false;
          }

          p++;
        }

        peg$posDetailsCache[pos] = details;
        return details;
      }
    }

    function peg$computeLocation(startPos, endPos) {
      var startPosDetails = peg$computePosDetails(startPos),
          endPosDetails   = peg$computePosDetails(endPos);

      return {
        start: {
          offset: startPos,
          line:   startPosDetails.line,
          column: startPosDetails.column
        },
        end: {
          offset: endPos,
          line:   endPosDetails.line,
          column: endPosDetails.column
        }
      };
    }

    function peg$fail(expected) {
      if (peg$currPos < peg$maxFailPos) { return; }

      if (peg$currPos > peg$maxFailPos) {
        peg$maxFailPos = peg$currPos;
        peg$maxFailExpected = [];
      }

      peg$maxFailExpected.push(expected);
    }

    function peg$buildException(message, expected, found, location) {
      function cleanupExpected(expected) {
        var i = 1;

        expected.sort(function(a, b) {
          if (a.description < b.description) {
            return -1;
          } else if (a.description > b.description) {
            return 1;
          } else {
            return 0;
          }
        });

        while (i < expected.length) {
          if (expected[i - 1] === expected[i]) {
            expected.splice(i, 1);
          } else {
            i++;
          }
        }
      }

      function buildMessage(expected, found) {
        function stringEscape(s) {
          function hex(ch) { return ch.charCodeAt(0).toString(16).toUpperCase(); }

          return s
            .replace(/\\/g,   '\\\\')
            .replace(/"/g,    '\\"')
            .replace(/\x08/g, '\\b')
            .replace(/\t/g,   '\\t')
            .replace(/\n/g,   '\\n')
            .replace(/\f/g,   '\\f')
            .replace(/\r/g,   '\\r')
            .replace(/[\x00-\x07\x0B\x0E\x0F]/g, function(ch) { return '\\x0' + hex(ch); })
            .replace(/[\x10-\x1F\x80-\xFF]/g,    function(ch) { return '\\x'  + hex(ch); })
            .replace(/[\u0100-\u0FFF]/g,         function(ch) { return '\\u0' + hex(ch); })
            .replace(/[\u1000-\uFFFF]/g,         function(ch) { return '\\u'  + hex(ch); });
        }

        var expectedDescs = new Array(expected.length),
            expectedDesc, foundDesc, i;

        for (i = 0; i < expected.length; i++) {
          expectedDescs[i] = expected[i].description;
        }

        expectedDesc = expected.length > 1
          ? expectedDescs.slice(0, -1).join(", ")
              + " or "
              + expectedDescs[expected.length - 1]
          : expectedDescs[0];

        foundDesc = found ? "\"" + stringEscape(found) + "\"" : "end of input";

        return "Expected " + expectedDesc + " but " + foundDesc + " found.";
      }

      if (expected !== null) {
        cleanupExpected(expected);
      }

      return new peg$SyntaxError(
        message !== null ? message : buildMessage(expected, found),
        expected,
        found,
        location
      );
    }

    function peg$decode(s) {
      var bc = new Array(s.length), i;

      for (i = 0; i < s.length; i++) {
        bc[i] = s.charCodeAt(i) - 32;
      }

      return bc;
    }

    function peg$parseRule(index) {
      var bc    = peg$bytecode[index],
          ip    = 0,
          ips   = [],
          end   = bc.length,
          ends  = [],
          stack = [],
          params, i;

      while (true) {
        while (ip < end) {
          switch (bc[ip]) {
            case 0:
              stack.push(peg$consts[bc[ip + 1]]);
              ip += 2;
              break;

            case 26:
              stack.push(void 0);
              ip++;
              break;

            case 27:
              stack.push(null);
              ip++;
              break;

            case 28:
              stack.push(peg$FAILED);
              ip++;
              break;

            case 29:
              stack.push([]);
              ip++;
              break;

            case 1:
              stack.push(peg$currPos);
              ip++;
              break;

            case 2:
              stack.pop();
              ip++;
              break;

            case 3:
              peg$currPos = stack.pop();
              ip++;
              break;

            case 4:
              stack.length -= bc[ip + 1];
              ip += 2;
              break;

            case 5:
              stack.splice(-2, 1);
              ip++;
              break;

            case 6:
              stack[stack.length - 2].push(stack.pop());
              ip++;
              break;

            case 7:
              stack.push(stack.splice(stack.length - bc[ip + 1], bc[ip + 1]));
              ip += 2;
              break;

            case 8:
              stack.push(input.substring(stack.pop(), peg$currPos));
              ip++;
              break;

            case 9:
              ends.push(end);
              ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

              if (stack[stack.length - 1]) {
                end = ip + 3 + bc[ip + 1];
                ip += 3;
              } else {
                end = ip + 3 + bc[ip + 1] + bc[ip + 2];
                ip += 3 + bc[ip + 1];
              }

              break;

            case 10:
              ends.push(end);
              ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

              if (stack[stack.length - 1] === peg$FAILED) {
                end = ip + 3 + bc[ip + 1];
                ip += 3;
              } else {
                end = ip + 3 + bc[ip + 1] + bc[ip + 2];
                ip += 3 + bc[ip + 1];
              }

              break;

            case 11:
              ends.push(end);
              ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

              if (stack[stack.length - 1] !== peg$FAILED) {
                end = ip + 3 + bc[ip + 1];
                ip += 3;
              } else {
                end = ip + 3 + bc[ip + 1] + bc[ip + 2];
                ip += 3 + bc[ip + 1];
              }

              break;

            case 12:
              if (stack[stack.length - 1] !== peg$FAILED) {
                ends.push(end);
                ips.push(ip);

                end = ip + 2 + bc[ip + 1];
                ip += 2;
              } else {
                ip += 2 + bc[ip + 1];
              }

              break;

            case 13:
              ends.push(end);
              ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

              if (input.length > peg$currPos) {
                end = ip + 3 + bc[ip + 1];
                ip += 3;
              } else {
                end = ip + 3 + bc[ip + 1] + bc[ip + 2];
                ip += 3 + bc[ip + 1];
              }

              break;

            case 14:
              ends.push(end);
              ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);

              if (input.substr(peg$currPos, peg$consts[bc[ip + 1]].length) === peg$consts[bc[ip + 1]]) {
                end = ip + 4 + bc[ip + 2];
                ip += 4;
              } else {
                end = ip + 4 + bc[ip + 2] + bc[ip + 3];
                ip += 4 + bc[ip + 2];
              }

              break;

            case 15:
              ends.push(end);
              ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);

              if (input.substr(peg$currPos, peg$consts[bc[ip + 1]].length).toLowerCase() === peg$consts[bc[ip + 1]]) {
                end = ip + 4 + bc[ip + 2];
                ip += 4;
              } else {
                end = ip + 4 + bc[ip + 2] + bc[ip + 3];
                ip += 4 + bc[ip + 2];
              }

              break;

            case 16:
              ends.push(end);
              ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);

              if (peg$consts[bc[ip + 1]].test(input.charAt(peg$currPos))) {
                end = ip + 4 + bc[ip + 2];
                ip += 4;
              } else {
                end = ip + 4 + bc[ip + 2] + bc[ip + 3];
                ip += 4 + bc[ip + 2];
              }

              break;

            case 17:
              stack.push(input.substr(peg$currPos, bc[ip + 1]));
              peg$currPos += bc[ip + 1];
              ip += 2;
              break;

            case 18:
              stack.push(peg$consts[bc[ip + 1]]);
              peg$currPos += peg$consts[bc[ip + 1]].length;
              ip += 2;
              break;

            case 19:
              stack.push(peg$FAILED);
              if (peg$silentFails === 0) {
                peg$fail(peg$consts[bc[ip + 1]]);
              }
              ip += 2;
              break;

            case 20:
              peg$savedPos = stack[stack.length - 1 - bc[ip + 1]];
              ip += 2;
              break;

            case 21:
              peg$savedPos = peg$currPos;
              ip++;
              break;

            case 22:
              params = bc.slice(ip + 4, ip + 4 + bc[ip + 3]);
              for (i = 0; i < bc[ip + 3]; i++) {
                params[i] = stack[stack.length - 1 - params[i]];
              }

              stack.splice(
                stack.length - bc[ip + 2],
                bc[ip + 2],
                peg$consts[bc[ip + 1]].apply(null, params)
              );

              ip += 4 + bc[ip + 3];
              break;

            case 23:
              stack.push(peg$parseRule(bc[ip + 1]));
              ip += 2;
              break;

            case 24:
              peg$silentFails++;
              ip++;
              break;

            case 25:
              peg$silentFails--;
              ip++;
              break;

            default:
              throw new Error("Invalid opcode: " + bc[ip] + ".");
          }
        }

        if (ends.length > 0) {
          end = ends.pop();
          ip = ips.pop();
        } else {
          break;
        }
      }

      return stack[0];
    }


        var nodes = {};
        var links = [];

        var make_node = function(type, identifier, attributeValuePairs) {
            if (nodes.hasOwnProperty(identifier)) { return nodes['identifier']; } // FIXME - should probably be an exception!
            var node = {
                identifier: identifier,
                label: identifier,
                type: type,
                attributes: attributeValuePairs };
            switch (type) {
              case 'entity': node.shape = 'ellipse'; break;
              case 'agent': node.shape = 'diamond'; break; // NOTE: the PROV style guidelines use a 'house'
              case 'activity': node.shape = 'rect'; break; // this is the default, but here for clarity
              case 'point': node.shape = 'circle'; node.label = ''; break;
            }
            // TODO - handle attribute/value pairs (maybe separate nodes vs. hovertips?)
            nodes[identifier] = node;
            return node;
        }

        var make_link = function(type, from, target) {
            var link = {
                source_node: from,
                target_node: target,
                type: 'link',
                label: type
            }
            links.push(link);
            return link;
        }

        var make_multi_link = function(source, type, targets, attributeValuePairs) {
            var target_labels = Object.keys(targets);
            var link_label = [type, source].concat(target_labels.map(function (l) { return targets[l]; })).join('__');
            var components = [source];
            var point = make_node('point', link_label, attributeValuePairs);
            point.label = '';
            var component_links = [{
                type: 'link',
                label: type,
                source_node: source,
                target_node: point.identifier
            }];
            for (var label in targets) {
                if (targets[label] && targets[label] != '-') {
                    component_links.push({
                        type: 'link',
                        label: label,
                        source_node: point.identifier,
                        target_node: targets[label]
                    });
                    components.push(targets[label]);
                }
            };
            point.components = components;
            links = links.concat(component_links);
            return {
                type: 'multi-link',
                node: point,
                links: component_links
            };
        }



    peg$result = peg$parseRule(peg$startRuleIndex);

    if (peg$result !== peg$FAILED && peg$currPos === input.length) {
      return peg$result;
    } else {
      if (peg$result !== peg$FAILED && peg$currPos < input.length) {
        peg$fail({ type: "end", description: "end of input" });
      }

      throw peg$buildException(
        null,
        peg$maxFailExpected,
        peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
        peg$maxFailPos < input.length
          ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
          : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
      );
    }
  }

  return {
    SyntaxError: peg$SyntaxError,
    parse:       peg$parse
  };
})();
