/*
Situation: A curator uses some information from the system, inputs it into a
           program outside the database, and enters the result back into the
           database.

Sample Data: This covers EV4, EV5, EV6.

Assumptions:
The following items are assumed to have ClinGen IDs already.  These are grouped into the Prov groupings of Entity/Actor/Activity.  Each entry is in the form
ClinGenID: what it is

Entities: 
InformationType/Known1: 
InformationType/Known2: Two pieces of information (it could be more or less)
                        that are already part of the system and are being
                        input into the program.  These may be data like
                        allele frequencies, or they may be elements from the
                        allele model, such as a reference sequence or allele
                        instance.
InformationType/Result1: The result of running the program, which is being
                         entered back into the database.

Actors:
Software/SoftwareID1: The exact code that is being run.  Should include version
                      numbering or other identifiers. 
Person/RunnerID1: The person who is running the software
Person/LoaderID1: The person who is loading the result

Activities:
Calculation/CalculationID1: The act of running the software and entering 
                      the result into the database. This activity transpired
                      between 13:00 and 14:00 on Apr 28, 2015.

-----

Note: One can do things like add the name of the software to the agent 
      declaration, but if you have the ID, you should be able to go look up
      any of that information.  We should decide if that is sufficient or not.

Note: How granular to make the activity type?

*/

document

prefix cg <http://clingen.org/>

bundle cg:prov-software-resultID1
    entity(cg:InformationType/ResultID1, [ prov:type="cg:resultinfotype" ])
    entity(cg:InformationType/KnownID1, [ prov:type="cg:knowninfotype1" ])
    entity(cg:InformationType/KnownID2, [ prov:type="cg:knowninfotype2" ])
    agent(cg:Software/SoftwareID1, [prov:type="prov:SoftwareAgent"] )
    agent(cg:Person/RunnerID1, [prov:type="prov:Person"] )
    agent(cg:Person/LoaderID1, [prov:type="prov:Person"] )
    activity(cg:Calculation/CalculationID1, 2015-04-28T13:00:10, 
             2015-04-28T14:00:10, 
             [prov:type="cg:calculation", cg:arguments="-arg1 -arg2"] )
    wasGeneratedBy(cg:InformationType/ResultID1, cg:Calculation/CalculationID1, -)
    used(cg:Calculation/CalculationID1, cg:InformationType/KnownID1, -)
    used(cg:Calculation/CalculationID1, cg:InformationType/KnownID2, -)
    wasAssociatedWith(cg:Calculation/CalculationID1, cg:Software/SoftwareID1, -)
    wasAssociatedWith(cg:Calculation/CalculationID1, cg:Person/RunnerID1, -, 
                     [ prov:type="software user"])
    wasAssociatedWith(cg:Calculation/CalculationID1, cg:Person/LoaderID1, -,
                      [prov:type="data loader"])
endBundle
endDocument
